;>

This document is adapted from ~ritpub-sipsyl 's [DESIGN.md](https://github.com/datryn-ribdun/urbit-webrtc/blob/master/DESIGN.md).

# Components

## `rtcswitchboard`: Negotiating connections

`rtcswitchboard` is a very simple Gall agent: it is a direct counterpart for the connection-negotiation API exposed by the [`RTCPeerConnection`](https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection) object from the WebRTC Javascript API. In particular, it allows other agents to subscribe to receive calls directed to them, and to place calls and subscribe to receive answers. Calls and answers are transmitted as opaque SDP messages generated by the WebRTC implementations themselves.

## `icepond`: Advertising ICE servers

`icepond` is another Gall agent, which allows ships to request ICE server URLs and authentication information from their sponsoring ships. It is envisioned that stars will offer to their sponsored planets a set of STUN and (possibly) TURN servers, together with authentication information on either a per-ship or per-request basis.

A ship can obtain ICE server connection information in the following ways:

- A static configuration of which ICE servers it advertises to which ships
- A [thread](https://urbit.org/docs/tutorials/arvo/gall/#threads) which dynamically obtains this information (e.g. by making an HTTP call to an external TURN service to obtain an authentication token)
- ICE servers from a sponsor

By default, the ICE servers obtained by a ship are those it will forward to ships it sponsors. This behavior too can be changed in the same ways as above. This default behavior is useful so that e.g. moons can receive ICE candidates via their sponsoring planet from the planet's sponsoring star.

## Campfire

Campfire is a web application which interfaces with Urbit via the `http-api` airlock. It provides ship-to-ship media calls and ephemeral text chat. Campfire has no gall agent, it's only a frontend that makes `icepond` and `rtcswitchboard` calls to setup/coordinate a WebRTC connection. Once that connection is established, the Urbit part of the application drops away and it becomes a regular WebRTC app.


# Use for other applications

The Gall agents `rtcswitchboard` and `icepond` can be used by other Urbit applications. Any app that could make use of a WebRTC connection could use these  agents. Perhaps a p2p file share (maybe like [Sharedrop](https://github.com/szimek/sharedrop))?

# Future work

The current design for using WebRTC with Urbit treats Urbit as a secure identity provider, application platform, and signalling channel. It does not forward any media through Urbit itself. This is by design, as Urbit is not yet ready to handle real-time computation or network streaming.

However, in the future it may be profitable to revisit this evaluation. In particular, an alternate design would see Urbit directly communicating real-time media streams between ships, and perhaps serving local WebRTC endpoints.

For media streaming over Urbit to be feasible, Urbit would need:

- Robust NAT-traversal capabilities.
  * This is desirable in any case, as Urbit itself relies on peer-to-peer communications. But the P2P implementation of Urbit will likely not use external ICE servers, but will rely on sponsoring ships for connectivity discovery, signalling, and last resort relays.
- Real-time computational performance
- Real-time networking
  * In particular, Urbit would need to be able to communicate between ships while allowing for packets to be dropped, and without writing packets to the event log.
  
The advantage over the current approach would be that applications within Urbit itself could make direct use of the real-time streaming functionality, and there would be an exact correspondence between the connectivity of Urbit ships and the connectivity of WebRTC applications implemented over Urbit.
